{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Charts/Charts.jsx","components/Cards/Cards.jsx","components/Counts/Counts.jsx","App.js","serviceWorker.js","index.js","App.module.css","images/image.png","components/Charts/Charts.module.css","components/Counts/Counts.module.css"],"names":["module","exports","url","fetchdata","country","a","changeableurl","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifedData","console","log","fetchdatadaily","modifieddata","map","dailydata","total","date","reportDate","fetchcountrydata","countries","countrydata","name","Charts","useState","setdailydata","useEffect","fetchapi","Linechart","length","labels","datasets","label","borderColor","fill","backgroundColor","Barchart","value","options","legend","display","title","text","className","styles","container","Cardsmatrics","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected_card","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","recovered_card","deaths_card","Counts","handleCountryChange","setcountrydata","fetchcountryapi","FormControl","formcontrol","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchData","setState","this","image","src","coronaimage","Cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8dc8eee6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3ivvV\",\"card\":\"Cards_card__nlU8E\",\"infected_card\":\"Cards_infected_card__37ZHG\",\"recovered_card\":\"Cards_recovered_card__2QnTz\",\"deaths_card\":\"Cards_deaths_card__21Wra\"};","import axios from \"axios\";\r\nconst url = \"https://covid19.mathdro.id/api\";\r\nconst indiaurl = \"https://api.covid19india.org/data.json\";\r\n\r\nexport const fetchdata = async (country) => {\r\n  let changeableurl = url;\r\n  if (country) {\r\n    changeableurl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableurl);\r\n    const modifedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n    // console.log(modifedData);\r\n    return modifedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const fetchdatadaily = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifieddata = data.map((dailydata) => ({\r\n      confirmed: dailydata.confirmed.total,\r\n      deaths: dailydata.deaths.total,\r\n      date: dailydata.reportDate,\r\n    }));\r\n    return modifieddata;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const fetchcountrydata = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((countrydata) => countrydata.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const fetchsatedata = async () => {\r\n  try {\r\n    const {\r\n      statewise: { confirmed, recovered, deaths },\r\n    } = await axios.get(indiaurl);\r\n    const modifedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n    };\r\n    return modifedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchdatadaily } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Charts.module.css\";\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailydata, setdailydata] = useState([]);\r\n  useEffect(() => {\r\n    const fetchapi = async () => {\r\n      setdailydata(await fetchdatadaily());\r\n    };\r\n    fetchapi();\r\n  }, []);\r\n  const Linechart = dailydata.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailydata.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailydata.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailydata.map(({ deaths }) => deaths),\r\n            label: \"Death\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgb(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  console.log(confirmed, recovered, deaths);\r\n  const Barchart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"people\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current sate in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={styles.container}>{country ? Barchart : Linechart}</div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cardsmatrics = ({\r\n  data: { confirmed, recovered, deaths, lastUpdate },\r\n}) => {\r\n  if (!confirmed) {\r\n    return \"Loading ...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected_card)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered_card)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from cases of covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths_card)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths from cases of covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cardsmatrics;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./Counts.module.css\";\r\nimport { fetchcountrydata } from \"../../api\";\r\nconst Counts = ({ handleCountryChange }) => {\r\n  const [countrydata, setcountrydata] = useState([]);\r\n  useEffect(() => {\r\n    const fetchcountryapi = async () => {\r\n      setcountrydata(await fetchcountrydata());\r\n    };\r\n    console.log(countrydata + \"this is the data\");\r\n    fetchcountryapi();\r\n  }, [setcountrydata]);\r\n  return (\r\n    <FormControl className={styles.formcontrol}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">global</option>\r\n        {countrydata.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Counts;\r\n","// import React from \"react\";\n// import logo from \"./logo.svg\";\nimport React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport { fetchdata } from \"./api\";\nimport coronaimage from \"./images/image.png\";\n// import Cards from \"./components/cards\";\nimport { Cardsmatrics, Charts, Counts } from \"./components\";\nimport { StylesProvider } from \"@material-ui/core\";\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchData = await fetchdata();\n    this.setState({ data: fetchData });\n  }\n  handleCountryChange = async (country) => {\n    //fetch data\n    const fetchData = await fetchdata(country);\n    // console.log(fetchData);\n    //setstate\n    this.setState({ data: fetchData, country: country });\n  };\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaimage} />\n        <Cardsmatrics data={data} />\n        <Counts handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2BpHr\",\"image\":\"App_image__2wOhs\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__2k0e-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Counts_formControl__3PxAT\"};"],"sourceRoot":""}